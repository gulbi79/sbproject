<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.demo.boot.common.repository.AdminRepository">

    <!-- 메뉴조회 -->
    <select id="selectMenu" parameterType="map" resultType="custommap">
    /* selectMenu */
    -- 전체메뉴 트리
    WITH W_MENU AS (
        SELECT MENU_CD, MENU_NM, PARENT_MENU_CD, URL, USE_YN, SORT, LEVEL AS LVL
         , 'M' || SYS_CONNECT_BY_PATH(MENU_CD, '.') AS TREE_ID
        FROM TB_MST_MENU
        START WITH PARENT_MENU_CD IS NULL
        CONNECT BY PRIOR MENU_CD = PARENT_MENU_CD
        ORDER SIBLINGS BY SORT
    )
    -- 사용자 권한에 따른 메뉴코드의 상위, 하위, 자신
    , W_ROLE_ALL_MENU AS (
        -- 역방향 전개 : 상위메뉴코드 전체
        SELECT MENU_CD
        FROM TB_MST_MENU
        START WITH MENU_NM LIKE '%' || @{f_menuname} || '%'
#if($_parameter.f_useyny == "on" and $_parameter.f_useynn != "on")
               AND USE_YN = 'Y'
#elseif($_parameter.f_useyny != "on" and $_parameter.f_useynn == "on")
               AND USE_YN = 'N'
#end
        CONNECT BY MENU_CD = PRIOR PARENT_MENU_CD
    )
    SELECT *
    FROM W_MENU
    WHERE MENU_CD IN (SELECT MENU_CD FROM W_ROLE_ALL_MENU)
    </select>

    <!-- 메뉴저장 -->
    <insert id="saveMenu" parameterType="map">
    /* saveMenu */
    MERGE INTO TB_MST_MENU A
    USING (
        SELECT @{menuCd} AS MENU_CD
             , @{menuNm} AS MENU_NM
             , @{url} AS URL
             , @{parentMenuCd} AS PARENT_MENU_CD
             , @{useYn} AS USE_YN
             , @{sort} AS SORT
             , @{state} AS STATE
        FROM DUAL
    ) B
       ON (A.MENU_CD = B.MENU_CD)
     WHEN MATCHED THEN
          UPDATE 
             SET A.MENU_NM        = B.MENU_NM
               , A.URL            = B.URL
               , A.PARENT_MENU_CD = B.PARENT_MENU_CD
               , A.USE_YN         = DECODE(B.STATE, 'deleted', 'N', B.USE_YN)
               , A.SORT           = B.SORT
               
          --DELETE WHERE B.STATE = 'deleted'
          
     WHEN NOT MATCHED THEN
          INSERT (A.MENU_CD, A.MENU_NM, A.URL, A.PARENT_MENU_CD, A.USE_YN, A.SORT)
          VALUES (B.MENU_CD, B.MENU_NM, B.URL, B.PARENT_MENU_CD, B.USE_YN, B.SORT)
    </insert>

    <!-- 공통코드조회 -->
    <select id="selectCode" parameterType="map" resultType="custommap">
    /* selectCode */
    SELECT GROUP_CD, GROUP_NM, CODE_CD, CODE_NM, SORT, USE_YN
    FROM TB_MST_CODE
#where()
 #if($_parameter.f_group and $_parameter.f_group != "")
      AND ( UPPER(GROUP_CD) LIKE '%' || UPPER(@{f_group}) || '%' OR UPPER(GROUP_NM) LIKE '%' || UPPER(@{f_group}) || '%' )
 #end
 #if($_parameter.f_code and $_parameter.f_code != "")
      AND ( UPPER(CODE_CD) LIKE '%' || UPPER(@{f_code}) || '%' OR UPPER(CODE_NM) LIKE '%' || UPPER(@{f_code}) || '%' )
 #end
#end
    ORDER BY GROUP_NM, SORT
    </select>

    <!-- 메뉴저장 -->
    <insert id="saveCode" parameterType="map">
    /* saveCode */
    MERGE INTO TB_MST_CODE A
    USING (
        SELECT @{groupCd} AS GROUP_CD
             , @{groupNm} AS GROUP_NM
             , @{codeCd} AS CODE_CD
             , @{codeNm} AS CODE_NM
             , @{sort} AS SORT
             , @{useYn} AS USE_YN
             , @{state} AS STATE
        FROM DUAL
    ) B
       ON ( A.GROUP_CD = B.GROUP_CD 
        AND A.CODE_CD  = B.CODE_CD )
     WHEN MATCHED THEN
          UPDATE 
             SET A.GROUP_NM       = B.GROUP_NM
               , A.CODE_NM        = B.CODE_NM
               , A.SORT           = B.SORT
               , A.USE_YN         = DECODE(B.STATE, 'deleted', 'N', B.USE_YN)
               
          --DELETE WHERE B.STATE = 'deleted'
          
     WHEN NOT MATCHED THEN
          INSERT (A.GROUP_CD, A.GROUP_NM, A.CODE_CD, A.CODE_NM, A.USE_YN, A.SORT)
          VALUES (B.GROUP_CD, B.GROUP_NM, B.CODE_CD, B.CODE_NM, B.USE_YN, B.SORT)
    </insert>

    <!-- ROLE 조회 -->
    <select id="selectRole" parameterType="map" resultType="custommap">
    /* selectRole */
    SELECT ROLE_CD, ROLE_NM
    FROM TB_MST_ROLE
#where()
 #if($_parameter.f_role and $_parameter.f_role != "")
      AND ( UPPER(ROLE_CD) LIKE '%' || UPPER(@{f_role}) || '%' OR UPPER(ROLE_NM) LIKE '%' || UPPER(@{f_role}) || '%' )
 #end
#end
    ORDER BY ROLE_NM
    </select>

    <!-- ROLE MENU 조회 -->
    <select id="selectRoleMenu" parameterType="map" resultType="custommap">
    /* selectRoleMenu */
    SELECT A.MENU_CD
    FROM TB_MAP_ROLE_MENU A
    WHERE A.ROLE_CD = @{clickRoleCd}
    </select>
    
    <!-- ROLE 조회 -->
    <select id="selectRole2" parameterType="map" resultType="String">
    /* selectRole */
    SELECT ROLE_CD 
    FROM TB_MST_ROLE
    WHERE ROLE_CD = 'ADMIN'
    </select>

    <!-- ROLE 저장 -->
    <insert id="saveRole" parameterType="map">
    /* saveRole */
    MERGE INTO TB_MST_ROLE A
    USING (
        SELECT @{roleCd} AS ROLE_CD
             , @{roleNm} AS ROLE_NM
             , @{state} AS STATE
        FROM DUAL
    ) B
       ON ( A.ROLE_CD = B.ROLE_CD )
     WHEN MATCHED THEN
          UPDATE 
             SET A.ROLE_NM       = B.ROLE_NM
               
          --DELETE WHERE B.STATE = 'deleted'
          
     WHEN NOT MATCHED THEN
          INSERT (A.ROLE_CD, A.ROLE_NM)
          VALUES (B.ROLE_CD, B.ROLE_NM)
    </insert>
    
    <!-- ROLE Menu 저장 -->
    <insert id="saveRoleMenu" parameterType="map">
    /* saveRoleMenu */
    BEGIN
	    DELETE FROM TB_MAP_ROLE_MENU 
	    WHERE ROLE_CD = @{roleCd}
	    ;
	    
	    INSERT INTO TB_MAP_ROLE_MENU (ROLE_CD, MENU_CD)
#foreach($map in $_parameter.uRoleMenuList)
        SELECT '$_parameter.roleCd', '$map.menuCd' FROM DUAL
  #if($foreach.hasNext) 
        UNION ALL 
  #end
#end
        ;

	END;
    </insert>

    <!-- User 조회 -->
    <select id="selectUser" parameterType="map" resultType="custommap">
    /* selectUser */
    SELECT USER_ID, USER_NM, EMAIL
    FROM TB_MST_USER
#where()
 #if($_parameter.f_user and $_parameter.f_user != "")
      AND ( UPPER(USER_ID) LIKE '%' || UPPER(@{f_user}) || '%' OR UPPER(USER_NM) LIKE '%' || UPPER(@{f_user}) || '%' )
 #end
#end
    ORDER BY USER_NM
    </select>
    
    <!-- USER ROLE 조회 -->
    <select id="selectUserRole" parameterType="map" resultType="custommap">
    /* selectUserRole */
    SELECT A.ROLE_CD
    FROM TB_MAP_ROLE A
    WHERE A.USER_ID = @{clickUserId}
    </select>
    
    <!-- User 저장 -->
    <insert id="saveUser" parameterType="map">
    /* saveUser */
    MERGE INTO TB_MST_USER A
    USING (
        SELECT @{userId} AS USER_ID
             , @{userNm} AS USER_NM
             , @{email} AS EMAIL
             , @{state} AS STATE
        FROM DUAL
    ) B
       ON ( A.USER_ID = B.USER_ID )
     WHEN MATCHED THEN
          UPDATE 
             SET A.USER_NM       = B.USER_NM
             SET A.EMAIL         = B.EMAIL
               
          --DELETE WHERE B.STATE = 'deleted'
          
     WHEN NOT MATCHED THEN
          INSERT (A.USER_ID, A.USER_NM, A.EMAIL)
          VALUES (B.USER_ID, B.USER_NM, B.EMAIL)
    </insert>
    
    <!-- User Role 저장 -->
    <insert id="saveUserRole" parameterType="map">
    /* saveUserRole */
    BEGIN
	    DELETE FROM TB_MAP_ROLE 
	    WHERE USER_ID = @{userId}
	    ;
	    
	    INSERT INTO TB_MAP_ROLE (ROLE_CD, USER_ID)
#foreach($map in $_parameter.uUserRoleList)
        SELECT '$map.roleCd', '$_parameter.userId' FROM DUAL
  #if($foreach.hasNext) 
        UNION ALL 
  #end
#end
        ;

	END;
    </insert>

</mapper>